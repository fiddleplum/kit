#pragma once#include "Model.h"#include "ResourceManager.h"#include <set>class RenderEngine{public:	RenderEngine();	~RenderEngine();	std::shared_ptr<Model> createModel();	void destroyModel(std::shared_ptr<Model> model);	ResourceManager<Texture> & getTextureManager();	ResourceManager<Shader> & getShaderManager();	void render();	RenderEngine(RenderEngine const &) = delete;	RenderEngine & operator =(RenderEngine const &) = delete;private:	class ModelCompare	{	public:		bool operator ()(std::shared_ptr<Model> model0, std::shared_ptr<Model> model1)		{			return *model0 < *model1;		}	};	std::set<std::shared_ptr<Model>, ModelCompare> mModels;	ResourceManager<Texture> mTextureManager;	ResourceManager<Shader> mShaderManager;};