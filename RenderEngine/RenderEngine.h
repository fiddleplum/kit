#pragma once#include "Model.h"#include "ResourceManager.h"#include <set>class RenderEngine{public:	RenderEngine();	~RenderEngine();	void addModel(Model * model);	void removeModel(Model * model);	ResourceManager<Texture, std::string const &> & getTextureManager();	void render() const;	RenderEngine(RenderEngine const &) = delete;	RenderEngine & operator =(RenderEngine const &) = delete;private:	class ModelCompare	{	public:		bool operator ()(Model const * model0, Model const * model1)		{			return *model0 < *model1;		}	};	std::set<Model *, ModelCompare> models;	std::shared_ptr<Shader const> currentShader;	std::set<std::shared_ptr<Texture const>> currentTextures;	ResourceManager<Texture, std::string const &> mTextureManager;	// ShaderManager	// TextureManager	// FontManager};