#pragma once#include "Model.h"#include <set>class RenderEngine{public:	RenderEngine();	~RenderEngine();	RenderEngine(RenderEngine const &) = delete;	RenderEngine & operator =(RenderEngine const &) = delete;private:	class ModelLess	{	public:		bool operator <(Model const * model0, Model const * model1);		{			if(model0->getShader() < model1->getShader())			{				return true;			}			else if(model0->getShader() > model1->getShader())			{				return false;			}			for(unsigned int i = 0; i < std::min(model0->getTextures()			if(model0->		}	};	std::set<Model *, ModelLess> models;	std::shared_ptr<Shader const> currentShader;	std::set<std::shared_ptr<Texture const>> currentTextures;	// ShaderManager	// TextureManager	// FontManager};